{"version":3,"file":"static/js/130.50489e61.chunk.js","mappings":"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","sources":["common/components/UIElements/BackToTop.jsx","common/components/UIElements/CustomButton.jsx","common/components/UIElements/ErrorModal.jsx","common/components/UIElements/Video.jsx","common/hooks/http-hook.jsx","../node_modules/markdown-to-jsx/index.tsx","pages/Work/projects/ProjectItem.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { BsFillArrowUpCircleFill } from 'react-icons/bs';\n\nimport './BackToTop.scss';\n\nconst BackToTop = () => {\n  const [showBackToTop, setshowBackToTop] = useState(false);\n\n  const toggleVisibility = () => {\n    if (window.scrollY > 300) {\n      setshowBackToTop(true);\n    } else {\n      setshowBackToTop(false);\n    }\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', toggleVisibility);\n    return () => {\n      window.removeEventListener('scroll', toggleVisibility);\n    };\n  }, []);\n\n  return (\n    <div id=\"back-to-top\">\n      <div\n        className={showBackToTop ? 'back-to-top' : 'hide-back-to-top'}\n        onClick={scrollToTop}\n      >\n        <BsFillArrowUpCircleFill className=\"back-to-top__icon\" />\n      </div>\n    </div>\n  );\n};\n\nexport default BackToTop;\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport './CustomButton.scss';\r\n\r\nconst CustomButton = (props) => {\r\n  return (\r\n    <Button\r\n      type={props.type}\r\n      variant={props.variant}\r\n      className={props.className}\r\n      disabled={props.disabled}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\n\r\nimport { CustomButton } from './';\r\n\r\nconst ErrorModal = (props) => {\r\n  const [show, setShow] = React.useState(props.show);\r\n  return (\r\n    <Modal show={show} onHide={() => setShow(false)}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Error</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <p>{props.error}</p>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <CustomButton onClick={() => setShow(false)}>Close</CustomButton>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ErrorModal;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nimport useHttpClient from '../../hooks/http-hook';\r\nimport './Video.scss';\r\n\r\nconst Video = (props) => {\r\n  const { isLoading, error, sendRequest } = useHttpClient();\r\n  const [videoId, setVideoId] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (!error) {\r\n      function createIframe(div) {\r\n        var iframe = document.createElement('iframe');\r\n        iframe.setAttribute(\r\n          'src',\r\n          'https://www.youtube.com/embed/' + videoId + '?autoplay=1&rel=0'\r\n        );\r\n        iframe.setAttribute('frameborder', '0');\r\n        iframe.setAttribute('allowfullscreen', '1');\r\n        iframe.setAttribute(\r\n          'allow',\r\n          'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture'\r\n        );\r\n        div.parentNode.replaceChild(iframe, div);\r\n      }\r\n\r\n      var playerElements = document.getElementsByClassName('youtube-player');\r\n      for (var n = 0; n < playerElements.length; n++) {\r\n        var div = document.createElement('div');\r\n        div.setAttribute('data-id', videoId);\r\n        var thumbNode = document.createElement('img');\r\n\r\n        thumbNode.src = videoId\r\n          ? '//i.ytimg.com/vi/ID/hqdefault.jpg'.replace('ID', videoId)\r\n          : '//ik.imagekit.io/itsrakesh/Portfolio/Misc/no_video_qewh2eY8Z.png?ik-sdk-version=javascript-1.4.3&updatedAt=1644752640643';\r\n\r\n        div.appendChild(thumbNode);\r\n\r\n        var playButton = document.createElement('div');\r\n        playButton.setAttribute('class', 'play');\r\n        div.appendChild(playButton);\r\n\r\n        if (videoId) {\r\n          div.onclick = function () {\r\n            createIframe(this);\r\n          };\r\n        }\r\n\r\n        playerElements[n].appendChild(div);\r\n      }\r\n    }\r\n  }, [videoId, error]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/project/projects/video/${props.repoName}`\r\n        );\r\n        setVideoId(responseData);\r\n      } catch (err) {}\r\n    };\r\n    fetchData();\r\n  }, [sendRequest, props.repoName]);\r\n\r\n  return (\r\n    <div className=\"youtube-player\" data-id={videoId}>\r\n      {isLoading && <Spinner animation=\"border\" />}\r\n      {error && <p>{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Video;\r\n","import { useState, useCallback, useRef, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [show, setShow] = useState(false);\n\n  const activeHttpRequests = useRef([]);\n\n  const sendRequest = useCallback(async (url, method = 'GET', data = null) => {\n    setIsLoading(true);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequests.current.push(httpAbortCtrl);\n\n    try {\n      const response = await axios({\n        method,\n        url,\n        data,\n        signal: httpAbortCtrl.signal\n      });\n      setIsLoading(false);\n      return response.data;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || \n                           err.message || \n                           'An unexpected error occurred';\n      setError(errorMessage);\n      setShow(true);\n      throw new Error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const clearError = useCallback(() => {\n    setError(null);\n    setShow(false);\n  }, []);\n\n  useEffect(() => {\n    const active = activeHttpRequests.current;\n    return () => {\n      active.forEach((abortCtrl) => abortCtrl.abort());\n    };\n  }, []);\n\n  return { isLoading, error, sendRequest, show, clearError };\n};\n\nexport default useHttpClient;\n","/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst enum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { class: 'className', for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BLOCKQUOTE_ALERT_R = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~~.*?~~|==.*?==|.|\\\\n)*?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1|\\\\w)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^==${INLINE_SKIP_R}==`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^~~${INLINE_SKIP_R}~~`)\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\n\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    match(source, state) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(state.prevCapture)\n      const isListBlock = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    order: Priority.HIGH,\n    parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state.inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n  state.inTable = true\n  let tableRow = source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, escaped, etc)\n    .split(/( *(?:`[^`]*`|\\\\\\||\\|) *)/)\n    .reduce((nodes, fragment) => {\n      if (fragment.trim() === '|')\n        nodes.push(\n          tableOutput\n            ? { type: RuleType.tableSeparator }\n            : { type: RuleType.text, text: fragment }\n        )\n      else if (fragment !== '') nodes.push.apply(nodes, parse(fragment, state))\n      return nodes\n    }, [] as MarkdownToJSX.ParserResult[])\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === RuleType.tableSeparator) {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === RuleType.text &&\n        (tableRow[i + 1] == null ||\n          tableRow[i + 1].type === RuleType.tableSeparator)\n      ) {\n        node.text = node.text.trimEnd()\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key\n        .trim()\n        .replace(/(-[a-z])/g, substr => substr[1].toUpperCase())\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href' || key === 'src') {\n    return sanitizeUrlFn(value, tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // Sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    state.prevCapture = state.prevCapture || ''\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n\n        const capture = rule.match(source, state)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n\n          // retain what's been processed so far for lookbacks\n          state.prevCapture += currCaptureString\n\n          source = source.substring(currCaptureString.length)\n\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType as unknown as RuleType\n          }\n\n          result.push(parsed)\n          break\n        }\n\n        i++\n      }\n    }\n\n    // reset on exit\n    state.prevCapture = ''\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(source: string, state: MarkdownToJSX.State) {\n  if (state.inline || state.simple) {\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nexport function sanitizer(url: string): string {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    const renderer = rules[ast.type].render as MarkdownToJSX.Rule['render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.sanitizer = options.sanitizer || sanitizer\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  options.createElement = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return options.createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): React.JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return options.createElement(\n      wrapper,\n      { key: 'outer' },\n      jsx\n    ) as React.JSX.Element\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): React.JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw, index) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n\n        // bail out, not supported\n        if (mappedKey === 'ref') return map\n\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          options.sanitizer\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = compile(normalizedValue.trim())\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, alert, content] = capture[0]\n          .replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, '')\n          .match(BLOCKQUOTE_ALERT_R)\n\n        return {\n          alert,\n          children: parse(content, state),\n        }\n      },\n      render(node, output, state) {\n        const props = {\n          key: state.key,\n        } as Record<string, unknown>\n\n        if (node.alert) {\n          props.className =\n            'markdown-alert-' +\n            options.slugify(node.alert.toLowerCase(), slugify)\n\n          node.children.unshift({\n            attrs: {},\n            children: [{ type: RuleType.text, text: node.alert }],\n            noInnerParse: true,\n            type: RuleType.htmlBlock,\n            tag: 'header',\n          })\n        }\n\n        return h('blockquote', props, output(node.children, state))\n      },\n    },\n\n    [RuleType.breakLine]: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n        }\n      },\n\n      render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          target: `#${options.slugify(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={options.sanitizer(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          ast.children = parseFunc(parse, trimmed, state)\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || (node.children ? output(node.children, state) : '')}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={options.sanitizer(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={options.sanitizer(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      match: (source, state) => {\n        if (state.inAnchor || options.disableAutoLink) {\n          return null\n        }\n\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      match: matchParagraph,\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={options.sanitizer(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: capture[0],\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={options.sanitizer(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{node.fallbackChildren}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      render(node /*, output, state*/) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      match: simpleInlineRegex(TEXT_MARKED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { match: match, parse: parse } = rules[key]\n\n  //   rules[key].match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div\n                id={options.slugify(def.identifier, slugify)}\n                key={def.identifier}\n              >\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<\n  Omit<React.HTMLAttributes<Element>, 'children'> & {\n    children: string\n    options?: MarkdownToJSX.Options\n  }\n> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof React.JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** used for lookbacks */\n    prevCapture?: string\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    alert?: string\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: React.JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: string\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: React.JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: React.JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => React.JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.JSX.IntrinsicAttributes,\n      ...children: React.ReactChild[]\n    ) => React.ReactChild\n\n    /**\n     * The library automatically generates an anchor tag for bare URLs included in the markdown\n     * document, but this behavior can be disabled if desired.\n     */\n    disableAutoLink: boolean\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactChild,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactChild\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n","import React, { useEffect, useCallback, useState, Fragment } from 'react';\r\nimport axios from 'axios';\r\nimport Markdown from 'markdown-to-jsx';\r\nimport { Container } from 'react-bootstrap';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport {\r\n  BackToTop,\r\n  ErrorModal,\r\n  Video\r\n} from '../../../common/components/UIElements';\r\nimport { LoadingSpinner } from '../../../common/components/UIElements/loadingAnimations';\r\nimport './ProjectItem.scss';\r\n\r\nconst ProjectItem = () => {\r\n  const [readme, setReadme] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [show, setShow] = useState(false);\r\n\r\n  const { repoName } = useParams();\r\n\r\n  const fetchRepo = useCallback(async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const data = await axios.get(\r\n        `https://raw.githubusercontent.com/RakeshPotnuru/${repoName}/${\r\n          'master' || 'main'\r\n        }/README.md`\r\n      );\r\n      setIsLoading(false);\r\n      setReadme(data.data);\r\n    } catch (error) {\r\n      setError(error);\r\n      setIsLoading(false);\r\n    }\r\n  }, [setReadme, repoName]);\r\n\r\n  useEffect(() => {\r\n    fetchRepo();\r\n  }, [fetchRepo]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Helmet>\r\n        <title>{repoName} | itsrakesh</title>\r\n        <meta name=\"description\" content={`See my ${repoName} project`} />\r\n        <meta property=\"og:title\" content={repoName} />\r\n        <meta\r\n          property=\"og:description\"\r\n          content={`See my ${repoName} project`}\r\n        />\r\n        <meta\r\n          property=\"og:image\"\r\n          content=\"https://ik.imagekit.io/itsrakesh/Portfolio/projects__og_r2hbQSeQy0.png?ik-sdk-version=javascript-1.4.3&updatedAt=1644157173960\"\r\n        />\r\n        <meta property=\"twitter:title\" content={repoName} />\r\n        <meta\r\n          property=\"twitter:description\"\r\n          content={`See my ${repoName} project`}\r\n        />\r\n        <meta\r\n          property=\"twitter:image\"\r\n          content=\"https://ik.imagekit.io/itsrakesh/Portfolio/projects__og_r2hbQSeQy0.png?ik-sdk-version=javascript-1.4.3&updatedAt=1644157173960\"\r\n        />\r\n      </Helmet>\r\n      <ErrorModal\r\n        show={show}\r\n        onHide={() => setShow(false)}\r\n        onClick={() => setShow(false)}\r\n        error={error}\r\n      />\r\n      <Container>\r\n        <div className=\"project-item\">\r\n          <h2>Project Details</h2>\r\n          <div className=\"project-item__video\">\r\n            <Video repoName={repoName} />\r\n          </div>\r\n          <em>\r\n            <span style={{ color: 'red' }}>*</span> This page is the README file\r\n            of{' '}\r\n            <a\r\n              href={`https://github.com/RakeshPotnuru/${repoName}`}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {repoName}\r\n            </a>{' '}\r\n            Github repository.\r\n          </em>\r\n          {isLoading && <LoadingSpinner />}\r\n          {!isLoading && (\r\n            <div className=\"project-item__details\">\r\n              <Markdown children={readme} />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <BackToTop />\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ProjectItem;\r\n"],"names":["BackToTop","showBackToTop","setshowBackToTop","useState","toggleVisibility","window","scrollY","useEffect","addEventListener","removeEventListener","_jsx","id","children","className","onClick","scrollToTop","scrollTo","top","behavior","BsFillArrowUpCircleFill","props","Button","type","variant","disabled","show","setShow","React","_jsxs","Modal","onHide","Header","closeButton","Title","Body","error","Footer","CustomButton","isLoading","sendRequest","useHttpClient","videoId","setVideoId","createIframe","div","iframe","document","createElement","setAttribute","parentNode","replaceChild","playerElements","getElementsByClassName","n","length","thumbNode","src","replace","appendChild","playButton","onclick","this","async","responseData","process","REACT_APP_BACKEND_URL","repoName","err","fetchData","Spinner","animation","setIsLoading","setError","activeHttpRequests","useRef","useCallback","url","method","arguments","undefined","data","httpAbortCtrl","AbortController","current","push","response","axios","signal","_err$response","_err$response$data","errorMessage","message","Error","clearError","active","forEach","abortCtrl","abort","r","i","e","MAX","HIGH","MED","LOW","MIN","l","reduce","t","toLowerCase","class","for","a","amp","apos","gt","lt","nbsp","quot","o","c","s","d","p","u","f","h","m","g","y","k","x","b","v","S","C","$","E","w","z","L","A","T","O","B","M","R","I","U","D","N","j","H","P","F","_","G","W","Z","q","Q","V","X","RegExp","J","K","Y","ee","te","ne","re","ie","le","ae","oe","ce","se","de","pe","ue","fe","he","me","ge","ye","ke","xe","be","ve","match","exec","prevCapture","list","inline","simple","order","parse","items","map","indexOf","ordered","start","render","key","Se","Ce","$e","Ee","we","ze","test","Le","inTable","trim","split","text","apply","trimEnd","Ae","align","cells","header","Te","textAlign","Oe","Be","Me","Re","Ie","every","some","Ue","decodeURIComponent","De","Ne","je","He","Pe","Fe","_e","Ge","_len","Array","_key","filter","Boolean","join","We","shift","Ze","overrides","_len2","_key2","forceInline","forceBlock","pop","wrapper","forceWrapper","toUpperCase","slice","sanitizer","slugify","namedCodesToUnicode","alert","unshift","attrs","noInnerParse","tag","lang","footnote","identifier","target","href","completed","checked","readOnly","enforceAtxHeadings","level","inAnchor","alt","title","disableAutoLink","ref","fallbackChildren","style","disableParsingRawHTML","Object","keys","substring","sort","renderRule","isArray","options","ProjectItem","readme","setReadme","useParams","fetchRepo","get","Fragment","Helmet","name","content","property","ErrorModal","Container","Video","color","rel","LoadingSpinner","Markdown"],"sourceRoot":""}